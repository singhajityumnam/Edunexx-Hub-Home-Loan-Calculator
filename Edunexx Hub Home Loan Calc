<!DOCTYPE html>
<a href="Calculator.html">About Us</a>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Edunexx Hub ‚Äî Home Loan Calculator (EMI, Amortization, Extra & Lump-Sum)</title>
  <style>
    :root{
      --bg:#f5f7fb;--card:#ffffff;--ink:#111827;--muted:#6b7280;--accent:#2563eb;--accent-2:#1e40af;--ok:#16a34a;--warn:#ea580c;
      --radius:16px;--shadow:0 10px 20px rgba(0,0,0,.06);
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Helvetica,Arial,sans-serif;background:var(--bg);color:var(--ink)}
    .wrap{max-width:1200px;margin:24px auto;padding:20px}
    header{display:flex;gap:16px;align-items:center;justify-content:space-between;margin-bottom:16px}
    header h1{font-size:20px;margin:0}
    header .sub{color:var(--muted);font-size:12px}

    .grid{display:grid;grid-template-columns:340px 1fr;gap:16px}
    @media (max-width: 960px){.grid{grid-template-columns:1fr}}

    .card{background:var(--card);border-radius:var(--radius);box-shadow:var(--shadow)}
    .card .content{padding:18px}

    .inputs label{display:block;font-size:12px;color:var(--muted);margin:10px 0 6px}
    .inputs input, .inputs select{width:100%;padding:10px 12px;border:1px solid #e5e7eb;border-radius:10px;font-size:14px;outline:none}
    .row{display:grid;grid-template-columns:1fr 1fr;gap:10px}

    .btn{display:inline-flex;align-items:center;justify-content:center;gap:8px;padding:10px 14px;border:0;border-radius:12px;background:var(--accent);color:#fff;font-weight:600;cursor:pointer}
    .btn:hover{background:var(--accent-2)}
    .btn.secondary{background:#111827}
    .btn.ghost{background:#eef2ff;color:#1e3a8a}

    .kpis{display:grid;grid-template-columns:repeat(4,1fr);gap:12px}
    @media (max-width: 960px){.kpis{grid-template-columns:repeat(2,1fr)}}
    .kpi{padding:14px;border-radius:14px;background:#f9fafb;border:1px solid #eef0f4}
    .kpi h3{margin:0 0 6px;font-size:12px;color:var(--muted);font-weight:600}
    .kpi .val{font-size:18px;font-weight:700}
    .kpi.small .val{font-size:16px}

    .charts{display:grid;grid-template-columns:1fr 1fr;gap:12px}
    @media (max-width: 960px){.charts{grid-template-columns:1fr}}
    canvas{width:100%;height:320px;border-radius:14px;background:#fff;box-shadow:var(--shadow)}

    .table-wrap{max-height:420px;overflow:auto;border:1px solid #eef0f4;border-radius:14px;background:#fff;box-shadow:var(--shadow)}
    table{width:100%;border-collapse:collapse;font-size:13px}
    thead th{position:sticky;top:0;background:#f3f4f6;z-index:1}
    th,td{padding:10px;border-bottom:1px solid #eef0f4;text-align:right;white-space:nowrap}
    th:first-child,td:first-child{text-align:center}
    tbody tr:hover{background:#fafafa}

    .section-title{display:flex;align-items:center;justify-content:space-between;margin:0 0 8px}
    .hint{font-size:12px;color:var(--muted)}

    .lumpsums{display:flex;flex-direction:column;gap:8px}
    .lump-row{display:grid;grid-template-columns:1fr 1fr auto;gap:8px}
    .remove{background:#fee2e2;color:#991b1b;border:0;border-radius:10px;padding:8px 10px;cursor:pointer}

    .bar-controls{display:flex;align-items:center;gap:10px;margin:8px 0}
    .bar-controls input[type="number"]{max-width:120px}
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div>
        <h1>üè† Edunexx Hub ‚Äî Home Loan Calculator</h1>
        <div class="sub">Defaults set for ‚Çπ50,00,000 @ 9% for 30 years. Add extra monthly and lump-sum payments, download CSV, and view charts.</div>
      </div>
      <div style="display:flex;gap:8px;flex-wrap:wrap">
        <button class="btn" id="calcBtn">Calculate</button>
        <button class="btn ghost" id="csvBtn">Download CSV</button>
      </div>
    </header>

    <div class="grid">
      <!-- Left: Inputs -->
      <div class="card">
        <div class="content inputs">
          <h2 style="margin:0 0 8px">Inputs</h2>

          <label for="loanAmount">Loan Amount (‚Çπ)</label>
          <input type="number" id="loanAmount" value="5000000" min="0" step="1000" />

          <div class="row">
            <div>
              <label for="interestRate">Annual Interest Rate (%)</label>
              <input type="number" id="interestRate" value="9" min="0" step="0.01" />
            </div>
            <div>
              <label for="tenureYears">Tenure (Years)</label>
              <input type="number" id="tenureYears" value="30" min="1" step="1" />
            </div>
          </div>

          <div class="row">
            <div>
              <label for="extraMonthly">Extra Monthly Payment (‚Çπ)</label>
              <input type="number" id="extraMonthly" value="0" min="0" step="500" />
            </div>
            <div>
              <label for="startMonth">Start Month for Extras</label>
              <input type="number" id="startMonth" value="1" min="1" step="1" />
            </div>
          </div>

          <div class="section-title" style="margin-top:12px">
            <h3 style="margin:0">Lump-Sum Payments</h3>
            <button class="btn secondary" id="addLump">+ Add Lump Sum</button>
          </div>
          <div class="hint">Add any one-time payments by month number (e.g., 12 for 1 year).</div>
          <div class="lumpsums" id="lumpsums"></div>
        </div>
      </div>

      <!-- Right: Results & Charts -->
      <div class="card">
        <div class="content">
          <div class="kpis">
            <div class="kpi"><h3>EMI (‚Çπ/month)</h3><div class="val" id="kpiEmi">‚Äî</div></div>
            <div class="kpi"><h3>Total Interest (‚Çπ)</h3><div class="val" id="kpiInterest">‚Äî</div></div>
            <div class="kpi"><h3>Total Payment (‚Çπ)</h3><div class="val" id="kpiTotal">‚Äî</div></div>
            <div class="kpi small"><h3>Actual Tenure</h3><div class="val" id="kpiTenure">‚Äî</div></div>
          </div>

          <div class="section-title" style="margin-top:12px">
            <h3 style="margin:0">Charts</h3>
            <div class="bar-controls">
              <label class="hint">Bar months:</label>
              <input type="number" id="barMonths" value="60" min="12" step="12" />
              <button class="btn ghost" id="refreshCharts">Refresh</button>
            </div>
          </div>

          <div class="charts">
            <canvas id="pieCanvas"></canvas>
            <canvas id="barCanvas"></canvas>
          </div>
        </div>
      </div>
    </div>

    <!-- Amortization Table -->
    <div style="margin-top:16px" class="card">
      <div class="content">
        <div class="section-title">
          <h2 style="margin:0">Amortization Schedule</h2>
          <div class="hint">Scroll to view all months</div>
        </div>
        <div class="table-wrap">
          <table id="ammoTable">
            <thead>
              <tr>
                <th>Month</th>
                <th>Opening Balance</th>
                <th>EMI</th>
                <th>Extra</th>
                <th>Lump Sum</th>
                <th>Interest</th>
                <th>Principal</th>
                <th>Closing Balance</th>
                <th>Total Paid</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <script>
    // ---------- Utilities ----------
    const fmtINR = (n)=> n===0 ? "‚Çπ0" : (new Intl.NumberFormat("en-IN", {maximumFractionDigits:2}).format(n));
    const toCurrency = (n)=> `‚Çπ${fmtINR(+n.toFixed(2))}`.replace('‚Çπ‚Çπ','‚Çπ');

    function emiAmount(P, annualRate, months){
      const r = annualRate/12/100;
      if (r === 0) return P / months;
      const x = Math.pow(1+r, months);
      return P * r * x / (x - 1);
    }

    // Build schedule with constant EMI; extras & lumps reduce tenure
    function buildSchedule({P, annualRate, years, extraMonthly=0, startMonth=1, lumps=[]}){
      const r = annualRate/12/100;
      const n = Math.round(years*12);
      let emi = emiAmount(P, annualRate, n);

      let bal = P;
      let month = 0;
      let rows = [];
      let totalInterest = 0;
      let totalPaid = 0;

      // Normalize lumps to map by month -> sum
      const lumpMap = new Map();
      lumps.forEach(ls=>{
        const m = Math.max(1, Math.floor(ls.month||0));
        const amt = Math.max(0, +ls.amount||0);
        if(!amt) return;
        lumpMap.set(m, (lumpMap.get(m)||0) + amt);
      });

      while (bal > 0 && month < n + 600) { // safety cap
        const opening = bal;
        month++;
        const interest = r * bal;
        let principalFromEmi = emi - interest;
        if (principalFromEmi < 0) principalFromEmi = 0; // high r edge

        // extras apply from startMonth onwards
        let extra = (month >= startMonth) ? extraMonthly : 0;
        if (extra < 0) extra = 0;

        let lump = lumpMap.get(month) || 0;

        // Do not overpay beyond remaining balance
        let principalPlanned = principalFromEmi + extra + lump;
        if (principalPlanned > bal) {
          // scale down extra/lump/emi principal proportionally to hit exact payoff
          const need = bal;
          // Keep interest as computed. We proportionally trim principal components
          const scale = need / principalPlanned;
          principalFromEmi *= scale;
          extra *= scale;
          lump *= scale;
          principalPlanned = need;
        }

        const principal = principalFromEmi + extra + lump;
        let actualPayment = interest + principal; // what goes out this month
        bal = +(bal - principal).toFixed(8);

        totalInterest += interest;
        totalPaid += actualPayment;

        rows.push({
          month,
          opening,
          emi: emi, // scheduled EMI (without extras & lump)
          extra,
          lump,
          interest,
          principal,
          closing: Math.max(0, bal),
          totalPaid: actualPayment,
        });

        if (bal <= 0.0001) { bal = 0; break; }
      }

      return { rows, emi, totalInterest, totalPaid, monthsActual: month };
    }

    // ---------- DOM & UI ----------
    const $ = (sel)=> document.querySelector(sel);
    const tableBody = document.querySelector('#ammoTable tbody');

    function addLumpRow(m=12,a=0){
      const wrap = document.createElement('div');
      wrap.className = 'lump-row';
      wrap.innerHTML = `
        <input type="number" class="lump-month" placeholder="Month" value="${m}" min="1" step="1" />
        <input type="number" class="lump-amount" placeholder="Amount (‚Çπ)" value="${a}" min="0" step="500" />
        <button class="remove" title="Remove">Remove</button>
      `;
      wrap.querySelector('.remove').addEventListener('click',()=>wrap.remove());
      $('#lumpsums').appendChild(wrap);
    }

    // Seed one example row
    addLumpRow(12, 100000);

    function gatherInputs(){
      const P = +$('#loanAmount').value || 0;
      const annualRate = +$('#interestRate').value || 0;
      const years = +$('#tenureYears').value || 0;
      const extraMonthly = +$('#extraMonthly').value || 0;
      const startMonth = Math.max(1, +$('#startMonth').value || 1);
      const lumps = Array.from(document.querySelectorAll('#lumpsums .lump-row')).map(row=>({
        month: +row.querySelector('.lump-month').value || 0,
        amount: +row.querySelector('.lump-amount').value || 0,
      })).filter(x=>x.amount>0 && x.month>0);
      return {P, annualRate, years, extraMonthly, startMonth, lumps};
    }

    function renderKpis({emi, totalInterest, totalPaid, monthsActual}, P){
      $('#kpiEmi').textContent = toCurrency(emi);
      $('#kpiInterest').textContent = toCurrency(totalInterest);
      $('#kpiTotal').textContent = toCurrency(totalPaid);
      const yrs = Math.floor(monthsActual/12), mos = monthsActual%12;
      $('#kpiTenure').textContent = `${yrs}y ${mos}m (${monthsActual} months)`;
    }

    function renderTable(rows){
      tableBody.innerHTML = '';
      const frag = document.createDocumentFragment();
      rows.forEach(r=>{
        const tr = document.createElement('tr');
        function td(v, cls=''){ const d=document.createElement('td'); d.textContent=v; if(cls) d.className=cls; return d; }
        tr.appendChild(td(r.month));
        tr.appendChild(td(toCurrency(r.opening)));
        tr.appendChild(td(toCurrency(r.emi)));
        tr.appendChild(td(toCurrency(r.extra)));
        tr.appendChild(td(toCurrency(r.lump)));
        tr.appendChild(td(toCurrency(r.interest)));
        tr.appendChild(td(toCurrency(r.principal)));
        tr.appendChild(td(toCurrency(r.closing)));
        tr.appendChild(td(toCurrency(r.totalPaid)));
        frag.appendChild(tr);
      });
      tableBody.appendChild(frag);
    }

    // ---------- Charts (Vanilla Canvas) ----------
    function drawPie(canvas, principal, interest){
      const ctx = canvas.getContext('2d');
      const w = canvas.width = canvas.clientWidth * window.devicePixelRatio;
      const h = canvas.height = canvas.clientHeight * window.devicePixelRatio;
      ctx.clearRect(0,0,w,h);
      const total = principal + interest;
      if (total <= 0) return;
      const cx = w/2, cy = h/2, r = Math.min(w,h)/3;
      const angleInterest = (interest/total) * Math.PI*2;

      // principal slice
      ctx.beginPath();
      ctx.moveTo(cx,cy);
      ctx.arc(cx,cy,r,0,Math.PI*2-angleInterest);
      ctx.closePath();
      ctx.fillStyle = '#93c5fd';
      ctx.fill();

      // interest slice
      ctx.beginPath();
      ctx.moveTo(cx,cy);
      ctx.arc(cx,cy,r,Math.PI*2-angleInterest,Math.PI*2);
      ctx.closePath();
      ctx.fillStyle = '#c4b5fd';
      ctx.fill();

      // Legend
      ctx.font = `${Math.max(12, h*0.04)}px system-ui`;
      ctx.fillStyle = '#111827';
      ctx.textAlign = 'left';
      ctx.fillText(`Principal: ${toCurrency(principal)}`, 20, 30);
      ctx.fillText(`Interest: ${toCurrency(interest)}`, 20, 55);

      // Title
      ctx.textAlign = 'center';
      ctx.fillText('Total Paid Breakdown', cx, h - 20);
    }

    function drawStackedBars(canvas, rows, monthsToShow){
      const ctx = canvas.getContext('2d');
      const w = canvas.width = canvas.clientWidth * window.devicePixelRatio;
      const h = canvas.height = canvas.clientHeight * window.devicePixelRatio;
      ctx.clearRect(0,0,w,h);
      const m = Math.min(monthsToShow, rows.length);
      if (m === 0) return;
      const dataP = rows.slice(0,m).map(r=>r.principal);
      const dataI = rows.slice(0,m).map(r=>r.interest);
      const maxY = Math.max(1, ...rows.slice(0,m).map(r=>r.principal + r.interest));

      const pad = 40, plotW = w - pad*2, plotH = h - pad*2;
      const barGap = 2 * window.devicePixelRatio;
      const barW = Math.max(1, (plotW - (m-1)*barGap) / m);

      // axes
      ctx.strokeStyle = '#e5e7eb'; ctx.lineWidth = 1;
      ctx.beginPath(); ctx.moveTo(pad, h-pad); ctx.lineTo(w-pad, h-pad); ctx.stroke();
      ctx.beginPath(); ctx.moveTo(pad, h-pad); ctx.lineTo(pad, pad); ctx.stroke();

      // bars
      let x = pad;
      for (let i=0;i<m;i++){
        const total = dataP[i] + dataI[i];
        const pH = (dataP[i]/maxY) * plotH;
        const iH = (dataI[i]/maxY) * plotH;
        // principal segment
        ctx.fillStyle = '#60a5fa';
        ctx.fillRect(x, h - pad - pH, barW, pH);
        // interest stacked on top
        ctx.fillStyle = '#a78bfa';
        ctx.fillRect(x, h - pad - pH - iH, barW, iH);
        x += barW + barGap;
      }

      // y labels
      ctx.fillStyle = '#6b7280';
      ctx.font = `${Math.max(10, h*0.035)}px system-ui`;
      ctx.textAlign = 'right';
      for (let i=0;i<=4;i++){
        const yVal = (i/4)*maxY;
        const y = h - pad - (i/4)*plotH;
        ctx.fillText(toCurrency(yVal), pad-6, y+4);
      }
      // title
      ctx.textAlign = 'center';
      ctx.fillText(`Monthly Payment Breakdown (first ${m} months)`, w/2, pad-10);
    }

    function calculateAndRender(){
      const inp = gatherInputs();
      const {rows, emi, totalInterest, totalPaid, monthsActual} = buildSchedule(inp);

      renderKpis({emi, totalInterest, totalPaid, monthsActual}, inp.P);
      renderTable(rows);

      // Charts
      const principalTotal = inp.P; // principal paid equals original P
      drawPie($('#pieCanvas'), principalTotal, totalInterest);

      const monthsToShow = Math.max(12, Math.min(+$('#barMonths').value || 60, rows.length));
      $('#barMonths').value = monthsToShow;
      drawStackedBars($('#barCanvas'), rows, monthsToShow);

      // Save last result for CSV
      window.__lastRows = rows;
    }

    function downloadCSV(){
      const rows = window.__lastRows || [];
      if (!rows.length){ alert('Please calculate first.'); return; }
      const headers = [
        'Month','Opening Balance','EMI','Extra','Lump Sum','Interest','Principal','Closing Balance','Total Paid'
      ];
      const lines = [headers.join(',')];
      rows.forEach(r=>{
        lines.push([
          r.month,
          r.opening.toFixed(2),
          r.emi.toFixed(2),
          r.extra.toFixed(2),
          r.lump.toFixed(2),
          r.interest.toFixed(2),
          r.principal.toFixed(2),
          r.closing.toFixed(2),
          r.totalPaid.toFixed(2)
        ].join(','));
      });
      const blob = new Blob([lines.join('\n')], {type:'text/csv'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = 'home-loan-amortization.csv';
      document.body.appendChild(a); a.click(); a.remove();
      URL.revokeObjectURL(url);
    }

    // Events
    document.getElementById('calcBtn').addEventListener('click', calculateAndRender);
    document.getElementById('csvBtn').addEventListener('click', downloadCSV);
    document.getElementById('addLump').addEventListener('click', ()=>addLumpRow());
    document.getElementById('refreshCharts').addEventListener('click', calculateAndRender);

    // Auto-calc on input changes (debounced)
    let t;
    document.querySelectorAll('input').forEach(el=>{
      el.addEventListener('input', ()=>{ clearTimeout(t); t=setTimeout(calculateAndRender, 250); });
    });

    // Initial calc
    calculateAndRender();
  </script>
</body>
</html>
